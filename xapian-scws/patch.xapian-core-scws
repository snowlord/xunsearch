-n
*** xapian-core-1.4.13/configure.ac	2019-10-14 08:47:43.000000000 +0800
--- xapian-core-scws-1.4.13/configure.ac	2019-10-31 18:10:22.000000000 +0800
***************
*** 1209,1214 ****
--- 1209,1273 ----
      [Define if you want a log of methods called and other debug messages])
  fi
  
+ dnl **********************
+ dnl * Check scws library *
+ dnl **********************
+ dnl hightman.20110411: See if we want to use scws as default tokenizer
+ SCWS_DIR=""
+ AC_MSG_CHECKING(for scws)
+ AC_ARG_WITH(scws,
+   [AS_HELP_STRING([--with-scws@<:@=DIR@:>@], [use scws as default tokenizer, DIR is the install PREFIX of scws])],
+   [ ],[ with_scws=no ]
+ )
+ 
+ if test "$with_scws" = "no"; then
+   AC_MSG_RESULT(no)
+ else
+   # Check header file
+   if test "$with_scws" = "yes"; then
+ 	searchdirs="/usr /usr/local /usr/local/scws /opt/local"
+ 	if test "x$prefix" != "xNONE" ; then
+ 	  searchdirs="$prefix $prefix/scws $searchdirs"
+ 	fi
+ 	for tmpdir in $searchdirs ; do
+ 	  if test -f $tmpdir/include/scws/scws.h ; then
+ 		SCWS_DIR=$tmpdir
+ 		break
+ 	  fi
+ 	done
+ 	if test "$SCWS_DIR" = ""; then
+ 	  AC_MSG_RESULT(no)
+ 	  AC_MSG_ERROR([scws not found on default search directories, specify DIR plz...])
+ 	fi
+   elif test -f $withval/include/scws/scws.h ; then
+ 	SCWS_DIR=$withval
+   else
+ 	AC_MSG_RESULT(no)
+ 	AC_MSG_ERROR([Invalid scws directory, unable to find the scws.h under $withval/include/scws])
+   fi
+   AC_MSG_RESULT([yes: $SCWS_DIR])
+ 
+   # Etc directory
+   if test "$SCWS_DIR" = "/usr"; then
+ 	SCWS_ETCDIR="/etc"
+   else
+ 	SCWS_ETCDIR="$SCWS_DIR/etc"
+   fi
+ 
+   # Check scws library
+   AC_CHECK_LIB(scws, scws_new, [
+ 	LIBS="$LIBS -L$SCWS_DIR/lib -lscws"
+ 	XAPIAN_LDFLAGS="$XAPIAN_LDFLAGS -L$SCWS_DIR/lib -lscws"
+ 	CPPFLAGS="$CPPFLAGS -I$SCWS_DIR/include"
+ 	AC_DEFINE(HAVE_SCWS, 1, [Define to 1 if you want to use scws as default tokenizer])
+ 	AC_DEFINE_UNQUOTED(SCWS_ETCDIR, "$SCWS_ETCDIR", [Resources directory of scws to load dictionary and rules])
+   ],[
+ 	AC_MSG_ERROR([scws_new() NOT found in libscws, please check it first.])	
+   ],[
+ 	-L$SCWS_DIR/lib
+   ])
+ fi
+ 
  dnl ******************************
  dnl * Set special compiler flags *
  dnl ******************************
*** xapian-core-1.4.13/include/xapian/queryparser.h	2019-10-14 08:47:43.000000000 +0800
--- xapian-core-scws-1.4.13/include/xapian/queryparser.h	2019-10-31 18:10:22.000000000 +0800
***************
*** 1029,1034 ****
--- 1029,1067 ----
       */
      XAPIAN_DEPRECATED(void set_max_wildcard_expansion(Xapian::termcount));
  
+ #if 1	/* HAVE_SCWS */
+     /** Load scws dict and rule (hightman.070706)
+      *
+      *  @param fpath    The directory of dict and rule file
+      *  @param xmem     Whether to load whole dict into memory (default to false)
+      *  @param multi    Options of scws  multi set (int 0~15)
+      */
+     void load_scws(const char *fpath, bool xmem = false, int multi = 0);
+ 
+     /** Specify the scws handle (hightman.121219)
+      *
+      *  Note: this will free exists scws handle automatically
+      *
+      *  @param scws     Type of scws_t defined in scws.h
+      */
+     void set_scws(void *scws);
+ 
+     /** Get the scws handle (hightman.121228)
+      *
+      *  @return	returns scws handler, cast type to scws_t before using it
+      */
+     void *get_scws();
+ 
+     /** Clear parsed query data (hightman.121219) */
+     void clear();
+ 
+     /** Specify the weight scale factor of synonym term.
+      *
+      *  @param scale	1 for no scale (which is the default).
+      */
+     void set_syn_scale(double scale);
+ #endif
+ 
      /** Parse a query.
       *
       *  @param query_string  A free-text query as entered by a user
*** xapian-core-1.4.13/include/xapian/termgenerator.h	2019-10-14 08:47:43.000000000 +0800
--- xapian-core-scws-1.4.13/include/xapian/termgenerator.h	2019-10-31 18:10:22.000000000 +0800
***************
*** 126,131 ****
--- 126,155 ----
      /// Stopper strategies, for use with set_stopper_strategy().
      typedef enum { STOP_NONE, STOP_ALL, STOP_STEMMED } stop_strategy;
  
+ #if 1	/* HAVE_SCWS */
+     /** Load scws dict and rule (hightman.070706)
+      *
+      *  @param fpath    The directory of dict and rule file
+      *  @param xmem     Whether to load whole dict into memory (default to false)
+      *  @param multi    Options of scws  multi set (int 0~15)
+      */
+     void load_scws(const char *fpath, bool xmem = false, int multi = 0);
+ 
+     /** Specify the scws handle (hightman.121219)
+      *
+      *  Note: this will free exists scws handle automatically
+      *
+      *  @param scws     Type of scws_t defined in scws.h
+      */
+     void set_scws(void *scws);
+ 
+     /** Get the scws handle (hightman.121228)
+      *
+      *  @return	returns scws handler, cast type to scws_t before using it
+      */
+     void *get_scws();
+ #endif
+ 
      /** Set flags.
       *
       *  The new value of flags is: (flags & mask) ^ toggle
*** xapian-core-1.4.13/api/queryinternal.cc	2019-10-14 08:47:43.000000000 +0800
--- xapian-core-scws-1.4.13/api/queryinternal.cc	2019-10-31 18:10:22.000000000 +0800
***************
*** 1249,1254 ****
--- 1249,1259 ----
  	// MatchNothing subqueries should have been removed by done().
  	Assert((*i).internal.get());
  	(*i).internal->gather_terms(void_terms);
+ #ifdef HAVE_SCWS
+ 	// hightman: strip unused term for highlight/reform query log
+ 	if (get_op() == Query::OP_AND_MAYBE || get_op() == Query::OP_AND_NOT)
+ 	    break;
+ #endif
      }
  }
  
*** xapian-core-1.4.13/queryparser/queryparser_internal.h	2019-10-14 08:47:43.000000000 +0800
--- xapian-core-scws-1.4.13/queryparser/queryparser_internal.h	2019-10-31 18:10:22.000000000 +0800
***************
*** 29,34 ****
--- 29,39 ----
  #include <xapian/queryparser.h>
  #include <xapian/stem.h>
  
+ /// hightman.20070701: use scws as default tokneizer
+ #ifdef HAVE_SCWS
+ #include <scws/scws.h>
+ #endif
+ 
  #include <list>
  #include <map>
  
***************
*** 93,98 ****
--- 98,111 ----
      list<string> stoplist;
      multimap<string, string> unstem;
  
+ #ifdef HAVE_SCWS
+     scws_t scws;
+     scws_res_t rptr, rcur;
+     const char *qptr;
+     int last_off;
+     double syn_scale;
+ #endif
+ 
      // Map "from" -> "A" ; "subject" -> "C" ; "newsgroups" -> "G" ;
      // "foobar" -> "XFOO". FIXME: it does more than this now!
      map<string, FieldInfo> field_map;
***************
*** 126,135 ****
--- 139,156 ----
    public:
      Internal() : stem_action(STEM_SOME), stopper(NULL),
  	default_op(Query::OP_OR), errmsg(NULL),
+ #ifdef HAVE_SCWS
+ 	scws(NULL), rptr(NULL), rcur(NULL),
+ 	syn_scale(1),
+ #endif
  	max_wildcard_expansion(0), max_partial_expansion(100),
  	max_wildcard_type(Xapian::Query::WILDCARD_LIMIT_ERROR),
  	max_partial_type(Xapian::Query::WILDCARD_LIMIT_MOST_FREQUENT) { }
  
+ #ifdef HAVE_SCWS
+     ~Internal();
+     void load_scws(const char *fpath, bool xmem, int multi);
+ #endif
      Query parse_query(const string & query_string, unsigned int flags, const string & default_prefix);
  };
  
*** xapian-core-1.4.13/queryparser/termgenerator_internal.h	2019-10-14 08:47:43.000000000 +0800
--- xapian-core-scws-1.4.13/queryparser/termgenerator_internal.h	2019-10-31 18:10:22.000000000 +0800
***************
*** 27,32 ****
--- 27,36 ----
  #include <xapian/termgenerator.h>
  #include <xapian/queryparser.h> // For Xapian::Stopper
  #include <xapian/stem.h>
+ /// hightman.20070701: use scws as default tokneizer
+ #ifdef HAVE_SCWS
+ #include <scws/scws.h>
+ #endif
  
  namespace Xapian {
  
***************
*** 39,44 ****
--- 43,51 ----
      Xapian::Internal::opt_intrusive_ptr<const Stopper> stopper;
      stop_strategy stop_mode;
      Document doc;
+ #ifdef HAVE_SCWS
+     scws_t scws;
+ #endif
      termpos cur_pos;
      TermGenerator::flags flags;
      unsigned max_word_length;
***************
*** 46,52 ****
--- 53,66 ----
  
    public:
      Internal() : strategy(STEM_SOME), stopper(NULL), stop_mode(STOP_STEMMED),
+ #ifdef HAVE_SCWS
+     scws(NULL),
+ #endif
  	cur_pos(0), flags(TermGenerator::flags(0)), max_word_length(64) { }
+ #ifdef HAVE_SCWS
+     ~Internal();
+     void load_scws(const char *fpath, bool xmem, int multi);
+ #endif
      void index_text(Utf8Iterator itor,
  		    termcount weight,
  		    const std::string & prefix,
*** xapian-core-1.4.13/queryparser/queryparser.cc	2019-10-14 08:47:43.000000000 +0800
--- xapian-core-scws-1.4.13/queryparser/queryparser.cc	2019-10-31 18:10:22.000000000 +0800
***************
*** 157,162 ****
--- 157,216 ----
      }
  }
  
+ #if 1	/* HAVE_SCWS */
+ void
+ QueryParser::load_scws(const char *fpath, bool xmem, int multi)
+ {
+ #ifdef HAVE_SCWS
+     internal->load_scws(fpath, xmem, multi);
+ #endif
+ }
+ 
+ void
+ QueryParser::set_scws(void *scws)
+ {
+ #ifdef HAVE_SCWS
+     if (internal->scws != NULL)
+     	scws_free(internal->scws);
+     internal->scws = (scws_t) scws; 
+ #endif
+ }
+ 
+ void *
+ QueryParser::get_scws()
+ {
+ #ifdef HAVE_SCWS
+     if (internal->scws == NULL)
+ 	internal->load_scws(NULL, false, 0);
+     return (void *) internal->scws;
+ #else
+     return NULL;
+ #endif
+ }
+ 
+ void
+ QueryParser::clear()
+ {
+     internal->field_map.clear();
+     internal->rangeprocs.clear();
+     internal->stoplist.clear();
+     internal->unstem.clear();
+     internal->errmsg = NULL;
+     internal->corrected_query.resize(0);
+ #ifdef HAVE_SCWS
+ 	internal->syn_scale = 1;
+ #endif
+ }
+ 
+ void
+ QueryParser::set_syn_scale(double scale)
+ {
+ #ifdef HAVE_SCWS
+ 	internal->syn_scale = scale;
+ #endif
+ }
+ #endif
+ 
  Query
  QueryParser::parse_query(const string &query_string, unsigned flags,
  			 const string &default_prefix)
*** xapian-core-1.4.13/queryparser/queryparser_internal.cc	2019-10-14 08:49:13.000000000 +0800
--- xapian-core-scws-1.4.13/queryparser/queryparser_internal.cc	2019-10-31 18:10:22.000000000 +0800
***************
*** 166,171 ****
--- 166,174 ----
      string unstemmed;
      QueryParser::stem_strategy stem;
      termpos pos;
+ #ifdef HAVE_SCWS
+     vector<string> multi;
+ #endif
      Query query;
  
      Term(const string &name_, termpos pos_)
***************
*** 242,247 ****
--- 245,282 ----
  	return qpi->stemmer(term);
      }
  
+ #ifdef HAVE_SCWS
+     double get_syn_scale() {
+ 	return qpi->syn_scale;
+     }
+ 
+     bool should_syn_scale() {
+ 	double diff = qpi->syn_scale > 1 ? qpi->syn_scale - 1 : 1 - qpi->syn_scale;
+  	return diff > 1e-15;
+     }
+ 
+     Query get_multi_synonyms_query(const string &raw, const string &prefix, const termcount pos) {
+ 	vector<Query> multi;
+ 	string::size_type pos1, pos2 = 0;
+ 	string::size_type len = raw.size();
+ 	for (pos2 = 0; pos2 < len; pos2 = pos1 + 1) {
+ 	    string term = prefix;
+ 	    pos1 = raw.find(' ', pos2);
+ 	    if (pos1 == pos2)
+ 		continue;
+ 	    if (pos1 == string::npos)
+ 		pos1 = len;
+ 	    if (raw[pos2] == 'Z') {
+ 		term  = 'Z' + prefix;
+ 		++pos2;
+ 	    }
+ 	    term += raw.substr(pos2, pos1 - pos2);
+ 	    multi.push_back(Query(term, 1, pos));
+ 	}
+ 	return Query(qpi->default_op, multi.begin(), multi.end());
+     }
+ #endif	/* HAVE_SCWS */
+ 
      void add_to_stoplist(const Term * term) {
  	qpi->stoplist.push_back(term->name);
      }
***************
*** 396,405 ****
--- 431,443 ----
      for (piter = prefixes.begin(); piter != prefixes.end(); ++piter) {
  	// First try the unstemmed term:
  	string term;
+ 	/* hightman.111231: Synonym optimization　*/
+ #ifndef HAVE_SCWS
  	if (!piter->empty()) {
  	    term += *piter;
  	    if (prefix_needs_colon(*piter, name[0])) term += ':';
  	}
+ #endif
  	term += name;
  
  	Xapian::Database db = state->get_database();
***************
*** 408,424 ****
--- 446,481 ----
  	if (syn == end && stem != QueryParser::STEM_NONE) {
  	    // If that has no synonyms, try the stemmed form:
  	    term = 'Z';
+ #ifndef HAVE_SCWS
  	    if (!piter->empty()) {
  		term += *piter;
  		if (prefix_needs_colon(*piter, name[0])) term += ':';
  	    }
+ #endif
  	    term += state->stem_term(name);
  	    syn = db.synonyms_begin(term);
  	    end = db.synonyms_end(term);
  	}
+ #ifdef HAVE_SCWS
+ 	vector<Query> syn_subqs;
+ 	termcount _pos = pos + 66;
+ 	while (syn != end) {
+ 	    Query qs = state->get_multi_synonyms_query(*syn, *piter, _pos++);
+ 	    if (state->should_syn_scale())
+ 		qs = Query(Query::OP_SCALE_WEIGHT, qs, state->get_syn_scale());
+ 	    syn_subqs.push_back(qs);
+ 	    ++syn;
+ 	} 
+ 	if (!syn_subqs.empty()) {
+ 	    syn_subqs.insert(syn_subqs.begin(), q);
+ 	    q = Query(q.OP_SYNONYM, syn_subqs.begin(), syn_subqs.end());
+ 	    syn_subqs.clear();
+ 	}
+ #else
  	q = Query(q.OP_SYNONYM,
  		  SynonymIterator(syn, pos, &q),
  		  SynonymIterator(end));
+ #endif
      }
      return q;
  }
***************
*** 542,547 ****
--- 599,640 ----
      vector<Query> cjk_subqs;
      const list<string> & prefixes = field_info->prefixes;
      list<string>::const_iterator piter;
+ /* hightman.20111223: used CJKTERM for multi segment */
+ #ifdef HAVE_SCWS
+     termcount _pos = pos + 77;
+     for (piter = prefixes.begin(); piter != prefixes.end(); ++piter) {
+ 	Query q = Query(*piter + name, 1, pos);
+ 	/* hightman.20120104: get synonyms */
+ 	if (!multi.empty()) {
+ 	    vector<Query> multi_qs;
+ 	    vector<string>::const_iterator mi;
+ 	    for (mi = multi.begin(); mi != multi.end(); mi++) {
+ 	    	multi_qs.push_back(Query(*piter + *mi, 1, _pos++));
+ 	    }
+ 	    Query qs = Query(state->default_op(), multi_qs.begin(), multi_qs.end());
+ 	    multi_qs.clear();
+ 	    cjk_subqs.push_back(qs);
+ 	}
+ 	if (state->flags & QueryParser::FLAG_AUTO_SYNONYMS) {
+ 	    Xapian::Database db = state->get_database();
+ 	    Xapian::TermIterator syn = db.synonyms_begin(name);
+ 	    Xapian::TermIterator end = db.synonyms_end(name);
+ 	    while (syn != end) {
+ 		Query qs = state->get_multi_synonyms_query(*syn, *piter, _pos++);
+ 		if (state->should_syn_scale())
+ 		    qs = Query(Query::OP_SCALE_WEIGHT, qs, state->get_syn_scale());
+ 		cjk_subqs.push_back(qs);
+ 		++syn;
+ 	    }
+ 	}
+ 	if (!cjk_subqs.empty()) {
+ 	    cjk_subqs.insert(cjk_subqs.begin(), q);
+ 	    q = Query(q.OP_SYNONYM, cjk_subqs.begin(), cjk_subqs.end());
+ 	    cjk_subqs.clear();
+ 	}
+ 	prefix_subqs.push_back(q);
+     }
+ #else
      for (piter = prefixes.begin(); piter != prefixes.end(); ++piter) {
  	const string& prefix = *piter;
  	for (CJKTokenIterator tk(name); tk != CJKTokenIterator(); ++tk) {
***************
*** 551,556 ****
--- 644,650 ----
  				     cjk_subqs.begin(), cjk_subqs.end()));
  	cjk_subqs.clear();
      }
+ #endif	/* HAVE_SCWS */
      Query * q = new Query(Query::OP_OR,
  			  prefix_subqs.begin(), prefix_subqs.end());
      delete this;
***************
*** 728,739 ****
--- 822,900 ----
     }
  }
  
+ /// hightman.20110701: load scws
+ #ifdef HAVE_SCWS
+ QueryParser::Internal::~Internal()
+ {
+     if (rptr != NULL) {
+ 	scws_free_result(rptr);
+ 	rptr = NULL;
+     }
+     if (scws != NULL) {
+ 	scws_free(scws);
+ 	scws = NULL;
+     }
+ }
+ 
+ void
+ QueryParser::Internal::load_scws(const char *fpath, bool xmem, int multi)
+ {
+     string temp;
+     if (scws == NULL) {
+ 	scws = scws_new();
+ 	scws_set_charset(scws, "utf8");
+ 	scws_set_ignore(scws, SCWS_NA);
+ 	scws_set_duality(scws, SCWS_YEA);
+     }
+     // default dict & rule
+     temp = string(fpath ? fpath : SCWS_ETCDIR) + string("/rules.utf8.ini");
+     scws_set_rule(scws, temp.data());
+     temp = string(fpath ? fpath : SCWS_ETCDIR) + string("/dict.utf8.xdb");
+     scws_set_dict(scws, temp.data(), xmem == true ? SCWS_XDICT_MEM : SCWS_XDICT_XDB);
+     /* hightman.20111209: custom dict support */
+     temp = string(fpath ? fpath : SCWS_ETCDIR) + string("/dict_user.txt");
+     scws_add_dict(scws, temp.data(), SCWS_XDICT_TXT);
+     // multi options
+     if (multi >= 0 && multi < 0x10)
+ 	scws_set_multi(scws, (multi<<12));
+ }
+ #endif	/* HAVE_SCWS */
+ 
  string
  QueryParser::Internal::parse_term(Utf8Iterator &it, const Utf8Iterator &end,
  				  bool cjk_ngram, bool & is_cjk_term,
  				  bool &was_acronym)
  {
      string term;
+ #ifdef HAVE_SCWS
+     int off = it.raw() - qptr;
+     while (rcur && (off > rcur->off)) {
+ 	rcur = rcur->next;
+     }
+     was_acronym = false;
+     if (rcur == NULL) { 
+ 	it = end;
+ 	term.resize(0);
+     } else {
+ 	// sometimes, auto_duality + word-end single word char will be repeated
+ 	// 说明几句 => 说明/几/几句
+ 	if (rcur->next && rcur->next->off == rcur->off && rcur->next->len > rcur->len)
+ 	    rcur = rcur->next;
+ 
+ 	it = Utf8Iterator(qptr + rcur->off);
+ 	term.append(it.raw(), rcur->len);
+ 	was_acronym = (rcur->attr[0] == 'n' && rcur->attr[1] == 'z') ? true : false;
+ 	is_cjk_term = (rcur->attr[0] == 'e' && rcur->attr[1] == 'n') ? false : true;
+ 	last_off = off = rcur->off + rcur->len;
+ 	rcur = rcur->next;
+ 
+ 	// sometimes, auto duality or multisegment
+ 	// 几句说搞笑 => 几句/句说/搞笑
+ 	if (rcur && off > rcur->off && (rcur->off + rcur->len) > off)
+ 	    off = rcur->off;
+ 	it = Utf8Iterator(qptr + off);
+     }
+ #else	/* HAVE_SCWS */
      // Look for initials separated by '.' (e.g. P.T.O., U.N.C.L.E).
      // Don't worry if there's a trailing '.' or not.
      if (U_isupper(*it)) {
***************
*** 820,825 ****
--- 981,987 ----
  	    }
  	}
      }
+ #endif	/* HAVE_SCWS */
      return term;
  }
  
***************
*** 1011,1020 ****
--- 1173,1203 ----
  	    }
  	    subqs2.clear();
  
+ #ifdef HAVE_SCWS
+ 	    string prefix;
+ 	    termcount _pos = (*begin)->pos + 88;
+ 	    const list<string> & prefixes = (*begin)->field_info->prefixes;
+ 	    if (prefixes.begin() != prefixes.end())
+ 		prefix = *(prefixes.begin());
+ 	    while (syn != end) {
+ 		Query qs = state->get_multi_synonyms_query(*syn, prefix, _pos++);
+ 		if (state->should_syn_scale())
+ 		    qs = Query(Query::OP_SCALE_WEIGHT, qs, state->get_syn_scale());
+ 		subqs2.push_back(qs);
+ 		++syn;
+ 	    }
+ 	    Query q = q_original_terms;
+ 	    if (subqs2.size() > 0) {
+ 		subqs2.insert(subqs2.begin(), q_original_terms);
+ 		q = Query(Query::OP_SYNONYM, subqs2.begin(), subqs2.end());
+ 		subqs2.clear();
+ 	    }
+ #else
  	    // Use the position of the first term for the synonyms.
  	    Query q(Query::OP_SYNONYM,
  		    SynonymIterator(syn, (*begin)->pos, &q_original_terms),
  		    SynonymIterator(end));
+ #endif
  	    subqs.push_back(q);
  
  	    begin = i;
***************
*** 1171,1176 ****
--- 1354,1364 ----
  void
  Term::as_positional_cjk_term(Terms * terms) const
  {
+  #ifdef HAVE_SCWS
+     // Add SCWS term only
+     Term * c = new Term(state, name, field_info, unstemmed, stem, pos);
+     terms->add_positional_term(c);
+ #else
      // Add each individual CJK character to the phrase.
      string t;
      for (Utf8Iterator it(name); it != Utf8Iterator(); ++it) {
***************
*** 1179,1184 ****
--- 1367,1373 ----
  	terms->add_positional_term(c);
  	t.resize(0);
      }
+ #endif	/* HAVE_SCWS */
  
      // FIXME: we want to add the n-grams as filters too for efficiency.
  
***************
*** 2993,2998 ****
--- 3182,3212 ----
  
      yyParser parser;
  
+ #ifdef HAVE_SCWS
+     /// Pre segmentation use scws
+     scws_res_t res;
+ 
+     if (scws == NULL)
+ 	load_scws(NULL, false, 0);
+     if (rptr != NULL) {
+ 	scws_free_result(rptr);
+ 	rptr = NULL;
+     }
+     qptr = it.raw();
+     scws_send_text(scws, qptr, it.left());
+     while ((res = scws_get_result(scws)) != NULL) {
+ 	if (rptr == NULL) { 
+ 	    rcur = rptr = res;
+         } else { 
+ 	    rcur->next = res;
+         }
+ 	while (rcur->next != NULL) { 
+ 	    rcur = rcur->next;
+ 	}
+     }
+     rcur = rptr;
+ #endif	/* HAVE_SCWS */
+ 
      unsigned newprev = ' ';
  main_lex_loop:
      enum {
***************
*** 3400,3405 ****
--- 3614,3624 ----
  		if (!stemmer.internal.get()) {
  		    // No stemmer is set.
  		    stem_term = STEM_NONE;
+ #ifdef HAVE_SCWS
+ 		} else if (is_cjk_term) {
+ 		    // Don't stem CJK terms.
+ 		    stem_term = STEM_NONE;
+ #endif
  		} else if (stem_term == STEM_SOME ||
  			   stem_term == STEM_SOME_FULL_POS) {
  		    if (!should_stem(unstemmed_term) ||
***************
*** 3414,3419 ****
--- 3633,3654 ----
  				       unstemmed_term, stem_term, term_pos++);
  
  	    if (is_cjk_term) {
+ #ifdef HAVE_SCWS
+ 		if (stopper.get() && (*stopper)(unstemmed_term)) {
+ 		    delete term_obj;
+ 		    if (it == end) break;
+ 		    continue;
+ 		}
+ 		/* multi scws handler */
+ 		term_obj->multi.clear();
+ 		while (rcur && (rcur->off + rcur->len) <= last_off) {
+ 		    if (rcur->len > 3)
+ 			term_obj->multi.push_back(string(qptr + rcur->off, rcur->len));
+ 		    rcur = rcur->next;
+ 		}
+ 		if (mode == IN_GROUP || mode == IN_GROUP2)
+ 		    mode = DEFAULT;
+ #endif
  		Parse(&parser, CJKTERM, term_obj, &state);
  		if (it == end) break;
  		continue;
***************
*** 3544,3549 ****
--- 3779,3791 ----
  	}
      }
  done:
+ #ifdef HAVE_SCWS
+     /// Free all segmented terms/words
+     if (rptr != NULL) {
+ 	scws_free_result(rptr);
+ 	rptr = NULL;
+     }
+ #endif
      if (!state.error) {
  	// Implicitly close any unclosed quotes.
  	if (mode == IN_QUOTES || mode == IN_PREFIXED_QUOTES)
*** xapian-core-1.4.13/queryparser/termgenerator.cc	2019-10-14 08:47:43.000000000 +0800
--- xapian-core-scws-1.4.13/queryparser/termgenerator.cc	2019-10-31 18:10:22.000000000 +0800
***************
*** 79,84 ****
--- 79,116 ----
      internal->db = db;
  }
  
+ #if 1	/* HAVE_SCWS */
+ void
+ TermGenerator::load_scws(const char *fpath, bool xmem, int multi)
+ {
+ #ifdef HAVE_SCWS
+     internal->load_scws(fpath, xmem, multi);
+ #endif
+ }
+ 
+ void
+ TermGenerator::set_scws(void *scws)
+ {
+ #ifdef HAVE_SCWS
+     if (internal->scws != NULL)
+ 	scws_free(internal->scws);
+     internal->scws = (scws_t) scws;
+ #endif
+ }
+ 
+ void *
+ TermGenerator::get_scws()
+ {
+ #ifdef HAVE_SCWS
+     if (internal->scws == NULL)
+ 	internal->load_scws(NULL, false, 0);
+     return (void *) internal->scws;
+ #else
+     return NULL;
+ #endif
+ }
+ #endif
+ 
  TermGenerator::flags
  TermGenerator::set_flags(flags toggle, flags mask)
  {
*** xapian-core-1.4.13/queryparser/termgenerator_internal.cc	2019-10-14 08:47:43.000000000 +0800
--- xapian-core-scws-1.4.13/queryparser/termgenerator_internal.cc	2019-10-31 18:10:22.000000000 +0800
***************
*** 246,251 ****
--- 246,321 ----
      }
  }
  
+ #ifdef HAVE_SCWS
+ template<typename ACTION> void
+ parse_terms_scws(Utf8Iterator itor, scws_t scws, termcount & pos, bool with_positions, ACTION action)
+ {
+     int last_endpos = 0, last_off = 0;
+     scws_res_t res, cur;
+     Utf8Iterator iterm;
+     string term;
+     const char *text = itor.raw();
+ 
+     scws_send_text(scws, text, itor.left());
+     while ((res = cur = scws_get_result(scws)) != NULL) { 
+ 	while (cur != NULL) {
+ 	    iterm.assign(text + cur->off, cur->len);
+ 	    if (Unicode::is_wordchar(*iterm)) {
+ 		term = Unicode::tolower(string(text + cur->off, cur->len));
+ 		bool is_cjk_term = CJK::codepoint_is_cjk(*iterm);
+ 		/// keep same termpos in multi-scws
+ 		if (with_positions) {
+ 		    if ((cur->off + cur->len) <= last_endpos) --pos;
+ 		    else {
+ 			if (cur->off == last_off)
+ 			    --pos;
+ 			last_endpos = cur->off + cur->len;
+ 		    }
+ 		    last_off = cur->off;
+ 		}
+ 		action(term, with_positions, is_cjk_term, itor);
+ 	    }
+ 	    cur = cur->next;
+ 	}
+ 	scws_free_result(res); 
+     }
+ }
+ #endif  /* HAVE_SCWS */
+ 
+ /// hightman.20070701: load scws
+ #ifdef HAVE_SCWS
+ TermGenerator::Internal::~Internal()
+ {
+     if (scws != NULL) {
+ 	scws_free(scws);
+ 	scws = NULL;
+     }
+ }
+ 
+ void 
+ TermGenerator::Internal::load_scws(const char *fpath, bool xmem, int multi)
+ {
+     string temp;
+     if (scws == NULL) {
+ 	scws = scws_new();
+ 	scws_set_charset(scws, "utf8");
+ 	scws_set_ignore(scws, SCWS_NA);
+ 	scws_set_duality(scws, SCWS_YEA);
+     }
+     // default dict & rule
+     temp = string(fpath ? fpath : SCWS_ETCDIR) + string("/rules.utf8.ini");
+     scws_set_rule(scws, temp.data());
+     temp = string(fpath ? fpath : SCWS_ETCDIR) + string("/dict.utf8.xdb");
+     scws_set_dict(scws, temp.data(), xmem == true ? SCWS_XDICT_MEM : SCWS_XDICT_XDB);
+     /* hightman.20111209: custom dict support */
+     temp = string(fpath ? fpath : SCWS_ETCDIR) + string("/dict_user.txt");
+     scws_add_dict(scws, temp.data(), SCWS_XDICT_TXT);
+     // multi options
+     if (multi >= 0 && multi < 0x10)
+ 	scws_set_multi(scws, (multi<<12));
+ }
+ #endif
+ 
  void
  TermGenerator::Internal::index_text(Utf8Iterator itor, termcount wdf_inc,
  				    const string & prefix, bool with_positions)
***************
*** 259,266 ****
--- 329,343 ----
  	current_stop_mode = stop_mode;
      }
  
+ #ifdef HAVE_SCWS
+     if (scws == NULL)
+ 	load_scws(NULL, false, 0);
+     parse_terms_scws(itor, scws, cur_pos, with_positions,
+ 	[=](const string & term, bool positional, bool is_cjk_term, const Utf8Iterator &) {
+ #else
      parse_terms(itor, cjk_ngram, with_positions,
  	[=](const string & term, bool positional, const Utf8Iterator &) {
+ #endif
  	    if (term.size() > max_word_length) return true;
  
  	    if (current_stop_mode == TermGenerator::STOP_ALL && (*stopper)(term))
***************
*** 276,281 ****
--- 353,362 ----
  		}
  	    }
  
+ #ifdef HAVE_SCWS
+ 	    /// hightman: Term start with CJK character needn't spell & stem
+ 	    if (is_cjk_term) return true;
+ #endif
  	    // MSVC seems to need "this->" on member variables in this
  	    // situation.
  	    if ((this->flags & FLAG_SPELLING) && prefix.empty())
